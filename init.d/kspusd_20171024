#!/bin/bash
# KSPUSD daemon script

WORK_PATH="/usr/local/kspus"

NAME=kspusd
OPTS="/r0/kspus"

PIDFILE=/usr/local/kspus/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

case "$1" in 
start)
    if [ -n "$(ps axf | grep "$WORK_PATH/$NAME $OPTS" | grep -Ev "grep|start")" ]; then
      printf "%s\n" "KSPUSD already running..."
      exit_code=0
    else
      printf "%-50s" "Startig $NAME..."
      cd $WORK_PATH
      if [ -f $PIDFILE ]; then
        rm -f $PIDFILE 
      fi
      #PID=$(nohup $NAME $OPTS > /dev/null 2>&1 & echo $!)
      nohup $WORK_PATH/$NAME $OPTS >> /var/log/kspusd.log &
      PID=`echo $!`
      if [ -z $PID ]; then
        printf "%s\n" "Start FAILED."
        exit_code=1
      else
        echo $PID > $PIDFILE
        printf "%s\n" "OK"
        exit_code=0
      fi
      sleep 5
    fi
;;
status)
    sleep 1
    #printf "%-50s" "Checking status of $NAME..." 
    RUNNINGPID=$(ps axf | grep "$WORK_PATH/$NAME $OPTS" | grep -Ev "grep|status" | awk '{print $1}')
    if [ "$(ps axf | grep "$WORK_PATH/$NAME $OPTS" | grep -Ev "grep|status" | wc -l)" -gt "1" ]; then
      printf "%s\n" "To many processes active. Please, kill them manually and remove pid-file" ;
      exit_code=5
    elif [ ! -f $PIDFILE ] && [ -n "$RUNNINGPID" ]; then
      printf "%s\n" "Process alive but pidfile not exists" 
      exit_code=5
    elif [ -f $PIDFILE ] && [ -z "$RUNNINGPID" ]; then
      printf "%s\n" "Process dead but pidfile exists" 
      exit_code=3
    elif [ -f $PIDFILE ] && [ -n "$RUNNINGPID" ] && [ "$(cat $PIDFILE)" != "$RUNNINGPID" ]; then
      printf "%s\n" "PID of process do not match PID in pid-file" 
      exit_code=5
    elif [ -f $PIDFILE ] && [ -n "$RUNNINGPID" ] && [ "$(cat $PIDFILE)" == "$RUNNINGPID" ]; then
      printf "%s\n" "Running" 
      exit_code=0
    else
      printf "%s\n" "Service not running" 
      exit_code=3
    fi
;;
stop)
	printf "%-50s" "Stopping $NAME"
	PID=`cat $PIDFILE`
	cd $WORK_PATH
	if [ -f $PIDFILE ]; then
		kill -SIGTERM $PID
		printf "%s\n" "Stopped."
		rm -f $PIDFILE
		exit_code=0
	else
		printf "%s\n" "Pidfile not found"
		exit_code=0
	fi
;;
restart)
	$0 stop
	$0 start
;;

*)
	echo "Usage: $0 {status|start|stop|restart}"
	exit_code=1
esac
exit $exit_code
